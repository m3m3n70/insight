// Generated by CoffeeScript 1.9.3
(function() {
  var InsightFactory, app, mainController;

  app = angular.module('insight', ['socket.io', 'ngAnimate']);

  app.config(function($socketProvider) {
    var url;
    url = '/';
    if (window.location.host.match(/localhost/)) {
      url = 'http://localhost:8000';
    }
    return $socketProvider.setConnectionUrl(url);
  });

  mainController = function($scope, $timeout, $socket, InsightFactory) {
    var asanaColors, generateChartForTeam, generateChartsForTeams, generateGraveyardForTeams, generateInitialWowMeter, generateWowMeterForTeams, generateWowTasks, init, rotator_builder, updateOnHeartbeat;
    generateChartForTeam = function(team, i) {
      var i;
      var $pies, $teamChart, $teamChartOld, bindTo, chart, chartColors, chartData, display_name, project, projects;
      $pies = $('#pies-1');
      if (i > 2) {
        $pies = $('#pies-2');
      }
      display_name = team['name'];
      $teamChart = $('<div class=\'team team-' + i + '\' id=\'team-' + team['id'] + '\'></div>');
      $teamChart.append('<h2>' + display_name + '</h2>');
      $teamChart.append('<div class=\'pie-chart\'></div>');
      $teamChartOld = $pies.find('#team-' + team['id']);
      if ($teamChartOld.length === 0) {
        $pies.append($teamChart);
      } else {
        $teamChartOld.replaceWith($teamChart);
      }
      chartData = [];
      chartColors = {};
      projects = team['projects'];
      i = 0;
      while (i < projects.length) {
        project = projects[i];
        chartData.push([project['name'], project['taskCount']]);
        chartColors[project['name']] = asanaColors[project['color']];
        i++;
      }
      bindTo = '#team-' + team['id'] + ' .pie-chart';
      chart = c3.generate({
        bindto: bindTo,
        size: {
          height: team.diameter,
          width: team.diameter
        },
        pie: {
          label: {
            format: function(value, ratio, id) {
              return value;
            }
          }
        },
        data: {
          columns: chartData,
          colors: chartColors,
          type: 'pie'
        },
        legend: {
          hide: true
        }
      });
      team.chart = chart;
      return chart;
    };
    generateChartsForTeams = function(teams) {
      var diameter, i, maxWidth, team, totalTaskCount;
      maxWidth = 1800.0;
      totalTaskCount = 0.0;
      diameter = void 0;
      i = 0;
      while (i < teams.length) {
        team = teams[i];
        totalTaskCount += parseInt(team['taskCount']);
        i++;
      }
      i = 0;
      while (i < teams.length) {
        team = teams[i];
        diameter = parseInt(team['taskCount']) / totalTaskCount * maxWidth;
        team.diameter = diameter;
        generateChartForTeam(team, i);
        i++;
      }
    };
    generateInitialWowMeter = function() {
      var bindTo, chart;
      bindTo = "#wow-chart";
      chart = c3.generate({
        bindto: bindTo,
        size: {
          height: 640,
          width: 1080
        },
        data: {
          x: "x",
          columns: [$scope.wowTimes, $scope.wowCounts],
          type: 'area'
        },
        axis: {
          x: {
            type: 'timeseries',
            tick: {
              format: '%H:%M'
            }
          }
        },
        legend: {
          hide: false
        }
      });
      return $scope.wowChart = chart;
    };
    generateWowMeterForTeams = function(teams) {
      var chartData, i, team, wowCount;
      wowCount = 0;
      i = 0;
      while (i < teams.length) {
        team = teams[i];
        wowCount += parseInt(team.wowTasks.length);
        i++;
      }
      $scope.wowTimes.push(new Date());
      $scope.wowCounts.push(wowCount);
      chartData = {
        columns: [$scope.wowTimes, $scope.wowCounts]
      };
      console.log(chartData);
      return $scope.wowChart.load(chartData);
    };
    generateGraveyardForTeams = function(teams) {
      var $graveyard, $img, deadTasks, fn, i, j, left, len, maxX, maxY, results, team, top;
      deadTasks = [];
      fn = function(team) {
        return deadTasks = deadTasks.concat(team.deadTasks);
      };
      for (j = 0, len = teams.length; j < len; j++) {
        team = teams[j];
        fn(team);
      }
      $graveyard = $('#graveyard');
      $('#graveyard').empty();
      maxX = 900;
      maxY = 450;
      left = 0;
      top = 0;
      i = 0;
      while (i < deadTasks.length) {
        left = Math.floor(Math.random() * maxX / 95) * 95;
        top = Math.floor(Math.random() * maxY / 150) * 150;
        $img = $('<img src=\'images/grave2.png\' width=100 title=\'' + deadTasks[i].name + '\' />');
        $img.css({
          left: left,
          bottom: top
        });
        $('#graveyard').append($img);
        i++;
      }
      $graveyard = $('#graveyard');
      $('#graveyard').empty();
      maxX = 900;
      maxY = 450;
      left = 0;
      top = 0;
      i = 0;
      results = [];
      while (i < deadTasks.length) {
        left = Math.floor(Math.random() * maxX / 95) * 95;
        top = Math.floor(Math.random() * maxY / 150) * 150;
        $img = $('<img src=\'images/grave2.png\' width=100 title=\'' + deadTasks[i].name + '\' />');
        $img.css({
          left: left,
          bottom: top
        });
        $('#graveyard').append($img);
        results.push(i++);
      }
      return results;
    };
    $scope.wowTaskIds = {};
    generateWowTasks = function(teams) {
      var j, len, results, team, tempWowTasks;
      tempWowTasks = [];
      results = [];
      for (j = 0, len = teams.length; j < len; j++) {
        team = teams[j];
        results.push((function(team) {
          var k, len1, ref, results1, task;
          ref = team.wowTasks;
          results1 = [];
          for (k = 0, len1 = ref.length; k < len1; k++) {
            task = ref[k];
            if ($scope.wowTaskIds[task.id]) {
              continue;
            } else {
              $scope.wowTaskIds[task.id] = true;
              results1.push($scope.wowTasks.push({
                teamName: team.name,
                task: task
              }));
            }
          }
          return results1;
        })(team));
      }
      return results;
    };
    rotator_builder = function(selector, args) {
      var $items, cur, loop_fn, num_items, prev, show_dur, trans_in, trans_in_dur, trans_out, trans_out_dur;
      trans_in = args.trans_in || "fadeIn";
      trans_out = args.trans_out || "fadeOut";
      trans_in_dur = args.trans_in_dur || 1000;
      trans_out_dur = args.trans_out_dur || 400;
      show_dur = args.show_dur || 7000;
      $items = $(selector);
      num_items = $items.length;
      cur = 0;
      prev = num_items - 1;
      loop_fn = function() {
        cur %= num_items;
        prev %= num_items;
        $($items[prev]).animate({
          left: '590px'
        }, trans_out_dur);
        $($items[cur]).delay(trans_out_dur + 10).animate({
          left: '590px'
        }, trans_in_dur);
        cur++;
        prev++;
        return setTimeout(loop_fn, show_dur);
      };
      return loop_fn;
    };
    updateOnHeartbeat = function(heartbeat) {
      var teams;
      teams = heartbeat.teams;
      generateChartsForTeams(teams);
      generateWowMeterForTeams(teams);
      generateGraveyardForTeams(teams);
      return generateWowTasks(teams);
    };
    $scope.tasks = [];
    $scope.projects = null;
    $scope.loaded = false;
    $scope.page = 1;
    $scope.togglePage = function() {
      if ($scope.page === 1) {
        return $scope.page = 2;
      }
      return $scope.page = 1;
    };
    $scope.wowTimes = ['x', new Date()];
    $scope.wowCounts = ["Wows", 2];
    asanaColors = {
      'dark-pink': '#ed03b1',
      'dark-green': '#12ae3e',
      'dark-blue': '#0056f7',
      'dark-red': '#ee2400',
      'dark-teal': '#008eaa',
      'dark-brown': '#cc2f25',
      'dark-orange': '#e17000',
      'dark-purple': '#AA00FF',
      'dark-warm-gray': '#6a1b21',
      'light-pink': '#FF00AA',
      'light-green': '#AAFF00',
      'light-blue': '#9bbbf6',
      'light-red': '#ffadad',
      'light-teal': '#96d5ff',
      'light-yellow': '#ffeda4',
      'light-orange': '#FFAA00',
      'light-purple': '#e4b5f5',
      'light-warm-gray': '#e9aab1'
    };
    init = function() {
      rotator_builder(".wow-task-card", {})();
      return generateInitialWowMeter();
    };
    init();
    return $socket.on('heartbeat', function(data) {
      $scope.loaded = true;
      return updateOnHeartbeat(data);
    });
  };

  mainController.$inject = ['$scope', '$timeout', '$socket', 'InsightFactory'];

  angular.module('insight').controller('mainController', mainController);

  InsightFactory = function($http) {
    var projects, projectsWithTasks, tasks;
    projects = function() {
      return $http.get('/projects');
    };
    tasks = function(projectId) {
      return $http.get('/tasks/' + projectId);
    };
    projectsWithTasks = function() {
      return $http.get('/projects-with-tasks');
    };
    return {
      projects: projects,
      projectsWithTasks: projectsWithTasks
    };
  };

  InsightFactory.$inject = ['$http'];

  angular.module('insight').factory('InsightFactory', InsightFactory);

}).call(this);
