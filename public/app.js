// Generated by CoffeeScript 1.9.3
(function() {
  var InsightFactory, app, mainController;

  app = angular.module("insight", ["socket.io", "ngAnimate", "as.sortable"]);

  app.config(function($socketProvider) {
    var url;
    url = "/";
    if (window.location.host.match(/localhost/)) {
      url = 'http://localhost:8000';
    }
    return $socketProvider.setConnectionUrl(url);
  });

  mainController = function($scope, $timeout, $socket, $filter, InsightFactory) {
    var asanaColors, conditionallyAddTask, fireBaseUrl, firebaseRef, firebaseSolidTasks, generateAllTasks, generateChartForTeam, generateChartsForTeams, generateGraveyardForTeams, generateInitialWowMeter, generateWowMeterForTeams, generateWowTasks, init, initializeSolidTasks, initializeTaskRotator, processCsv, shuffle, sortSolidTasks, updateOnHeartbeat;
    shuffle = function(o) {
      var i, j, x;
      i = o.length;
      while (i) {
        j = Math.floor(Math.random() * i);
        x = o[--i];
        o[i] = o[j];
        o[j] = x;
      }
      return o;
    };
    generateChartForTeam = function(team, i) {
      var i;
      var $pies, $teamChart, $teamChartOld, bindTo, chart, chartColors, chartData, display_name, project, projects;
      $pies = $('#pies-1');
      if (i > 2) {
        $pies = $('#pies-2');
      }
      display_name = team['name'];
      $teamChart = $('<div class=\'team team-' + i + '\' id=\'team-' + team['id'] + '\'></div>');
      $teamChart.append('<h2>' + display_name + '</h2>');
      $teamChart.append('<div class=\'pie-chart\'></div>');
      $teamChartOld = $pies.find('#team-' + team['id']);
      if ($teamChartOld.length === 0) {
        $pies.append($teamChart);
      } else {
        $teamChartOld.replaceWith($teamChart);
      }
      chartData = [];
      chartColors = {};
      projects = team['projects'];
      i = 0;
      while (i < projects.length) {
        project = projects[i];
        chartData.push([project['name'], project['taskCount']]);
        chartColors[project['name']] = asanaColors[project['color']];
        i++;
      }
      bindTo = '#team-' + team['id'] + ' .pie-chart';
      chart = c3.generate({
        bindto: bindTo,
        size: {
          height: team.diameter,
          width: team.diameter
        },
        pie: {
          label: {
            format: function(value, ratio, id) {
              return value;
            }
          }
        },
        data: {
          columns: chartData,
          colors: chartColors,
          type: 'pie'
        },
        legend: {
          hide: true
        }
      });
      team.chart = chart;
      return chart;
    };
    generateChartsForTeams = function(teams) {
      var diameter, i, maxWidth, team, totalTaskCount;
      maxWidth = 1800.0;
      totalTaskCount = 0.0;
      diameter = void 0;
      i = 0;
      while (i < teams.length) {
        team = teams[i];
        totalTaskCount += parseInt(team['taskCount']);
        i++;
      }
      i = 0;
      while (i < teams.length) {
        team = teams[i];
        diameter = parseInt(team['taskCount']) / totalTaskCount * maxWidth;
        team.diameter = diameter;
        generateChartForTeam(team, i);
        i++;
      }
    };
    processCsv = function(allText) {
      var allTextLines, data, i, j, lines, tarr;
      allTextLines = allText.split(/\r\n|\n/);
      lines = [];
      i = 0;
      while (i < allTextLines.length - 1) {
        data = allTextLines[i].split(',');
        tarr = [];
        j = 0;
        while (j < data.length) {
          tarr.push(data[j]);
          j++;
        }
        lines.push(tarr);
        i++;
      }
      return lines;
    };
    generateInitialWowMeter = function() {
      return InsightFactory.getInitialWowCounts().then(function(data) {
        var bindTo, chart, rows;
        rows = processCsv(data.data);
        $scope.wowTimes = rows.map(function(a) {
          var x;
          x = new Date(0);
          x.setSeconds(a[0]);
          return x;
        });
        $scope.wowTimes.unshift("x");
        $scope.wowCounts = rows.map(function(a) {
          return a[1];
        });
        $scope.wowCounts.unshift("Wows");
        bindTo = "#wow-chart";
        chart = c3.generate({
          bindto: bindTo,
          size: {
            height: 640,
            width: 1080
          },
          data: {
            x: "x",
            columns: [$scope.wowTimes, $scope.wowCounts],
            type: 'area'
          },
          axis: {
            x: {
              type: 'timeseries',
              tick: {
                format: '%H:%M',
                multiline: false,
                rotate: 75,
                culling: {
                  max: 10
                }
              }
            }
          },
          legend: {
            hide: false
          }
        });
        return $scope.wowChart = chart;
      });
    };
    generateWowMeterForTeams = function(teams) {
      var chartData, i, team, wowCount;
      wowCount = 0;
      i = 0;
      while (i < teams.length) {
        team = teams[i];
        wowCount += parseInt(team.wowTasks.length);
        i++;
      }
      $scope.wowTimes.push(new Date());
      $scope.wowCounts.push(wowCount);
      chartData = {
        columns: [$scope.wowTimes, $scope.wowCounts]
      };
      return $scope.wowChart.load(chartData);
    };
    generateGraveyardForTeams = function(teams) {
      var $graveyard, $img, deadTasks, fn, i, k, left, len, maxX, maxY, results, team, top;
      deadTasks = [];
      fn = function(team) {
        return deadTasks = deadTasks.concat(team.deadTasks);
      };
      for (k = 0, len = teams.length; k < len; k++) {
        team = teams[k];
        fn(team);
      }
      $graveyard = $('#graveyard');
      $('#graveyard').empty();
      maxX = 900;
      maxY = 450;
      left = 0;
      top = 0;
      i = 0;
      while (i < deadTasks.length) {
        left = Math.floor(Math.random() * maxX / 95) * 95;
        top = Math.floor(Math.random() * maxY / 150) * 150;
        $img = $('<img src=\'images/grave2.png\' width=100 title=\'' + deadTasks[i].name + '\' />');
        $img.css({
          left: left,
          bottom: top
        });
        $('#graveyard').append($img);
        i++;
      }
      $graveyard = $('#graveyard');
      $('#graveyard').empty();
      maxX = 900;
      maxY = 450;
      left = 0;
      top = 0;
      i = 0;
      results = [];
      while (i < deadTasks.length) {
        left = Math.floor(Math.random() * maxX / 95) * 95;
        top = Math.floor(Math.random() * maxY / 150) * 150;
        $img = $('<img src=\'images/grave2.png\' width=100 title=\'' + deadTasks[i].name + '\' />');
        $img.css({
          left: left,
          bottom: top
        });
        $('#graveyard').append($img);
        results.push(i++);
      }
      return results;
    };
    $scope.wowTaskIds = {};
    $scope.wowTasks = [];
    generateWowTasks = function(teams) {
      var k, len, results, team, tempWowTasks;
      tempWowTasks = [];
      results = [];
      for (k = 0, len = teams.length; k < len; k++) {
        team = teams[k];
        results.push((function(team) {
          var l, len1, ref, results1, task;
          ref = team.wowTasks;
          results1 = [];
          for (l = 0, len1 = ref.length; l < len1; l++) {
            task = ref[l];
            if ($scope.wowTaskIds[task.id]) {
              continue;
            } else {
              $scope.wowTaskIds[task.id] = true;
              $scope.wowTasks.push({
                teamName: team.name,
                task: task
              });
              results1.push(true);
            }
          }
          return results1;
        })(team));
      }
      return results;
    };
    conditionallyAddTask = function(team, task) {
      if ($scope.allTaskIds[task.id]) {
        return true;
      } else {
        $scope.allTaskIds[task.id] = true;
        $scope.allTasks.unshift({
          teamName: team.name,
          task: task
        });
        return true;
      }
    };
    $scope.allTaskIds = {};
    $scope.allTasks = [];
    generateAllTasks = function(teams) {
      var firstTime, fn, fn1, i, k, l, len, len1, project, projects, ref, task, team;
      firstTime = true;
      if ($scope.allTasks.length > 0) {
        firstTime = false;
      }
      fn = function(team) {
        var fn1, l, len1, len2, m, ref, ref1, results, task;
        if (team.wowTasks) {
          ref = team.wowTasks;
          fn1 = function(task) {
            task.wow = true;
            return conditionallyAddTask(team, task);
          };
          for (l = 0, len1 = ref.length; l < len1; l++) {
            task = ref[l];
            fn1(task);
          }
        }
        if (team.validatedTasks) {
          ref1 = team.validatedTasks;
          results = [];
          for (m = 0, len2 = ref1.length; m < len2; m++) {
            task = ref1[m];
            results.push((function(task) {
              task.validated = true;
              return conditionallyAddTask(team, task);
            })(task));
          }
          return results;
        }
      };
      for (k = 0, len = teams.length; k < len; k++) {
        team = teams[k];
        fn(team);
        projects = team.projects;
        i = 0;
        while (i < projects.length) {
          project = projects[i];
          ref = project.tasks;
          fn1 = function(task) {
            return conditionallyAddTask(team, task);
          };
          for (l = 0, len1 = ref.length; l < len1; l++) {
            task = ref[l];
            fn1(task);
          }
          i++;
        }
      }
      if (firstTime) {
        return shuffle($scope.allTasks);
      }
    };
    $scope.taskClass = function(task) {
      if (task.wow) {
        return "wow";
      }
      if (task.validated) {
        return "validated";
      }
      if (task.dead) {
        return "dead";
      }
      return "";
    };
    initializeTaskRotator = function() {
      return $(function() {
        return setInterval((function() {
          if (!($scope.allTasks.length > 0)) {
            return;
          }
          return $timeout(function() {
            var lastEl, taskId;
            lastEl = $scope.allTasks.pop();
            $scope.allTasks.unshift(lastEl);
            taskId = lastEl.task.id;
            return $("#task-" + taskId).css({
              opacity: 0
            }).animate({
              opacity: 1
            });
          });
        }), 10000);
      });
    };
    updateOnHeartbeat = function(heartbeat) {
      var teams;
      teams = heartbeat.teams;
      generateChartsForTeams(teams);
      generateWowMeterForTeams(teams);
      return generateAllTasks(teams);
    };
    $scope.loaded = false;
    $scope.page = 3;
    $scope.togglePage = function() {
      if ($scope.page === 1) {
        return $scope.page = 2;
      }
      if ($scope.page === 2) {
        return $scope.page = 3;
      }
      return $scope.page = 1;
    };
    $scope.wowTimes = ['x', new Date()];
    $scope.wowCounts = ["Wows", 2];
    asanaColors = {
      'dark-pink': "#B8D0DE",
      'dark-green': "#9FC2D6",
      'dark-blue': "#86B4CF",
      'dark-red': "#107FC9",
      'dark-teal': "#0E4EAD",
      'dark-brown': "#0B108C",
      'dark-orange': "#B8D0DE",
      'dark-purple': "#9FC2D6",
      'dark-warm-gray': "#86B4CF",
      'light-pink': "#107FC9",
      'light-green': "#0E4EAD",
      'light-blue': "#0B108C",
      'light-red': "#B8D0DE",
      'light-teal': "#9FC2D6",
      'light-yellow': "#86B4CF",
      'light-orange': "#107FC9",
      'light-purple': "#0E4EAD",
      'light-warm-gray': "#0B108C"
    };
    fireBaseUrl = "https://sizzling-torch-5381.firebaseio.com/";
    firebaseRef = new Firebase(fireBaseUrl);
    firebaseSolidTasks = firebaseRef.child("solid-tasks");
    sortSolidTasks = function() {
      var compare;
      compare = function(a, b) {
        if (a.order < b.order) {
          return -1;
        }
        if (a.order > b.order) {
          return 1;
        }
        return 0;
      };
      return $scope.solidTasks = $scope.solidTasks.sort(compare);
    };
    $scope.addSolidTask = function() {
      var item;
      item = {
        task: $scope.newSolidTask.task,
        rating: $scope.newSolidTask.rating,
        order: 9999
      };
      return firebaseRef.child("solid-tasks").push(item);
    };
    $scope.removeSolidTask = function(task) {
      var id;
      id = task.id;
      $scope.solidTasks = $filter("filter")($scope.solidTasks, {
        id: "!" + id
      });
      return firebaseSolidTasks.child(id).remove();
    };
    $scope.editSolidTask = function(task) {
      var id;
      id = task.id;
      $("#solid-" + id + " .display").hide();
      return $("#solid-" + id + " .edit").show();
    };
    $scope.saveSolidTask = function(task) {
      var id, item, obj;
      id = task.id;
      item = {
        task: task.task,
        rating: task.rating,
        order: task.order
      };
      return firebaseSolidTasks.update((
        obj = {},
        obj["" + id] = item,
        obj
      ));
    };
    initializeSolidTasks = function() {
      var name;
      $scope.solidTasks = [];
      $scope.newSolidTask = {};
      name = "solid-tasks";
      firebaseSolidTasks.on("child_added", function(snapshot) {
        return $timeout(function() {
          var id, item;
          id = snapshot.key();
          item = snapshot.val();
          item["id"] = id;
          $scope.solidTasks.push(item);
          return sortSolidTasks();
        });
      });
      firebaseSolidTasks.on("child_removed", function(snapshot) {
        return $timeout(function() {
          var id;
          id = snapshot.key();
          $scope.solidTasks = $filter("filter")($scope.solidTasks, {
            id: "!" + id
          });
          return sortSolidTasks();
        });
      });
      firebaseSolidTasks.on("child_changed", function(snapshot) {
        return $timeout(function() {
          var id, item;
          id = snapshot.key();
          item = snapshot.val();
          console.log(item);
          $scope.solidTasks = $filter("filter")($scope.solidTasks, {
            id: "!" + id
          });
          item["id"] = id;
          $scope.solidTasks.push(item);
          return sortSolidTasks();
        });
      });
      return $scope.dragControlListeners = {
        orderChanged: function(event) {
          var i, k, len, order, ref, task, updates;
          console.log(event);
          updates = {};
          i = 0;
          ref = $scope.solidTasks;
          for (k = 0, len = ref.length; k < len; k++) {
            task = ref[k];
            order = task.id + "/order";
            updates[order] = i;
            i++;
          }
          return firebaseSolidTasks.update(updates);
        }
      };
    };
    init = function() {
      $scope.loaded = true;
      return initializeSolidTasks();
    };
    init();
    return $socket.on('heartbeat', function(data) {
      $scope.loaded = true;
      return updateOnHeartbeat(data);
    });
  };

  mainController.$inject = ["$scope", "$timeout", "$socket", "$filter", "InsightFactory"];

  angular.module("insight").controller("mainController", mainController);

  InsightFactory = function($http) {
    var getInitialWowCounts, projects, projectsWithTasks, tasks;
    projects = function() {
      return $http.get("/projects");
    };
    tasks = function(projectId) {
      return $http.get('/tasks/' + projectId);
    };
    projectsWithTasks = function() {
      return $http.get('/projects-with-tasks');
    };
    getInitialWowCounts = function() {
      return $http.get("/wowcounts.csv");
    };
    return {
      projects: projects,
      projectsWithTasks: projectsWithTasks,
      getInitialWowCounts: getInitialWowCounts
    };
  };

  InsightFactory.$inject = ['$http'];

  angular.module('insight').factory('InsightFactory', InsightFactory);

}).call(this);
